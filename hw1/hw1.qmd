---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 27 @ 11:59PM
author: Yung-Han Chang (UID 105912578)
format:
  html:
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:

```{r}
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1.  Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2.  Create a **private** repository `biostat-203b-2023-winter` and add `Hua-Zhou` and `tomokiokuno0528` as your collaborators with write permission.

3.  Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `master` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `master` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in `main` branch.

4.  After each homework due date, course reader and instructor will check out your `master` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5.  After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data](https://mimic-iv.mit.edu), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. (Hint: The CITI training takes a couple hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Verification links:**

Completion Report:<https://www.citiprogram.org/verify/?kb37c24ec-62f6-4034-a117-1ec1bf19e0f3-53712965>

Completion Certificate: <https://www.citiprogram.org/verify/?w46aacfee-fe5b-475d-93ee-e0af7773febb-53712965>

PhysioNet Credential: <https://drive.google.com/file/d/1jB-F4fwDuMa7z3Ql5jTmrDrsVu1TBvgY/view?usp=share_link>

## Q3. Linux Shell Commands

1.The `~/mimic` folder within the Docker container contains data sets from MIMIC-IV. Refer to the documentation <https://mimic.mit.edu/docs/iv/> for details of data files.\

```{bash, echo=T}
ls -l /Users/tinachang/Desktop/203b-hw/hw1/mimic
```

Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files on storage and are not big data friendly practices. Just read from the data folder `~/mimic` directly in following exercises.

Use Bash commands to answer following questions.

2.  Display the contents in the folders `core`, `hosp`, `icu`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

***Solution***

```{bash, echo=T}
ls -l /Users/tinachang/Desktop/203b-hw/hw1/mimic/core 
```
```{bash, echo=T}
ls -l /Users/tinachang/Desktop/203b-hw/hw1/mimic/hosp
```
```{bash, echo=T}
ls -l /Users/tinachang/Desktop/203b-hw/hw1/mimic/icu
```

Because the files are too large. Therefore, those csv files are compressed to csv.gz files.

3.  Briefly describe what bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

***Solution***

`zcat`

It is a command for viewing the contents of a compressed file without literally uncompressing it.

`zless`

Zless is a filter which allows examination of compressed or plain text files one screenful at a time on a soft-copy terminal.

`zmore`

Zmore is a filter which allows examination of compressed or plain text files one screenful at a time on a soft-copy terminal.

`zgrep`

Zgrep is used to search out expressions from a given a file even if it is compressed.

4.  What's the output of the following bash script?

```{bash, echo=T}
for datafile in /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/*.gz
do
ls -l $datafile
done
```

It lists all .csv.gz files contents in /Users/tinachang/Desktop/203b-hw/hw1/mimic/core.

Display the number of lines in each data file using a similar loop.


***Solution***

```{bash, echo=T}
for datafile in /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/*.gz
do
zcat < $datafile | wc -l
done
```


5.  Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

***Solution***

```{bash, echo=T}
#Display the first few lines of `admissions.csv.gz`.
zcat < /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/admissions.csv.gz | head

```
```{bash, echo=T}
zcat < /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/admissions.csv.gz | tail -n +2 | wc -l
#There are 523740 rows.(no header)
```
```{bash, echo=T}
zcat < /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/admissions.csv.gz | tail -n +2 | awk -F, '{print $1}' | sort |
uniq | wc -l
#There are 256878 unique patients.(no header)
```



6.  What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on.)

***Solution: admission_type***
```{bash, echo=T}
zcat < /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/admissions.csv.gz | tail -n +2 | awk -F, '{print $6}' | sort |
uniq -c | head 
zcat < /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/admissions.csv.gz | tail -n +2 | awk -F, '{print $6}' | sort |
uniq -c | wc -l
#There are 9 unique values in admission_type.
```
***Solution: admission_location*** 
```{bash, echo=T}
#admission_location
zcat < /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/admissions.csv.gz | tail -n +2 | awk -F, '{print $7}' | sort |
uniq -c | head 
zcat < /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/admissions.csv.gz | tail -n +2 | awk -F, '{print $7}' | sort |
uniq -c | wc -l
#There are 12 unique values in admission_location.
```
***Solution: insurance*** 
```{bash, echo=T}
#insurance
zcat < /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/admissions.csv.gz | tail -n +2 | awk -F, '{print $9}' | sort |
uniq -c | head
zcat < /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/admissions.csv.gz | tail -n +2 | awk -F, '{print $9}' | sort |
uniq -c | wc -l
#There are 3 unique values in insurance.
```
***Solution: ethnicity*** 
```{bash, echo=T}
#ethnicity
zcat < /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/admissions.csv.gz | tail -n +2 | awk -F, '{print $12}' | sort |
uniq -c | head
zcat < /Users/tinachang/Desktop/203b-hw/hw1/mimic/core/admissions.csv.gz | tail -n +2 | awk -F, '{print $12}' | sort |
uniq -c | wc -l
#There are 8 unique values in ethnicity.
```


## Q4. Who's popular in Price and Prejudice

1.  You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder.

```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```

Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.

***Solution***

'Wget is a networking command-line tool that lets you download files and interact with REST APIs. It supports the HTTP , HTTPS , FTP , and FTPS internet protocols.'

```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  grep -o $char pg42671.txt | wc -l
done
```

'Elizabeth:634/Jane: 294/Lydia:170/Darcy:417'

2.  What's the difference between the following two commands?

```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```

and

```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

***Solution***

`echo 'hello, world' > test1.txt` overwrites 'hello, world' from command to test1.txt.

`echo 'hello, world' >> test2.txt` appends 'hello, world' from command to test2.txt.

3.  Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:

```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```

Using `chmod` to make the file executable by the owner, and run

```{bash, echo=T}
#| eval: false
chmod 700 /Users/tinachang/Desktop/203b-hw/biostat-203b-2023-winter/hw1/middle.sh 
#-rwxr-x--x@  1 tinachang  staff     141 Jan 25 08:51 middle.sh
```

```{bash, echo=T}
/Users/tinachang/Desktop/203b-hw/biostat-203b-2023-winter/hw1/middle.sh /Users/tinachang/Desktop/203b-hw/pg42671.txt 20 5
```

Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

***Solution***

The output: Author and Editor (the 16th line to the 20th line in `pg42671.txt`.)

`"$1"`
The file name in command, which is `pg42671.txt` here.

`"$2"`
The end line for this file, which is the 20th line in `pg42671.txt`.

`"$3"`
Is is the numbers of lines we want to show, which is 5 lines here.

Why do we need the first line of the shell script (#!/bin/sh)? 
Because we need to make sure the script runs with sh, not other shell.


## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2021`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

```{bash, echo=T}
cal
#show the calender for this month
```

```{bash, echo=T}
cal 2021
#show the calender for whole 2021
```

```{bash, echo=T}
cal 9 1752
#show the calender for Sep 1752. But missing 1752/9/3 - 1752/9/12
```

```{bash, echo=T}
date
#show the date and time right now
```

```{bash, echo=T}
hostname
#show Domain Name System name 
```

```{bash, echo=T}
arch
#show the computer architecture now
```

```{bash, echo=T}
uname -a
#show the System information right now.
```

```{bash, echo=T}
uptime
#show information about how long your system has been running together with the current time, number of users with running sessions, and the system load averages for the past 1, 5, and 15 minutes.
```

```{bash, echo=T}
who am i
#show current username
```

```{bash, echo=T}
who
#show users currently logged in to UNIX or Linux operating system.
```
 
```{bash}
#| eval: false
w
#show who is logged on and what they are doing
```
9:58  up 7 days, 21:25, 2 users, load averages: 2.66 2.39 2.30
USER     TTY      FROM              LOGIN@  IDLE WHAT
tinachang console  -                17Jan23 7days -
tinachang s002     -                Tue16       - w
    
```{bash, echo=T}
id
#show your current ID for system
```

```{bash, echo=T}
last | head
#show top 10 list of all the users logged in and out.
```

```{bash, echo=T}
echo {con,pre}{sent,fer}{s,ed}
#show the permutations for the words in the three braces
```

```{bash, echo=T}
time sleep 5
#Used to delay for a fixed amount of time during the execution of any script. Here I check if the shell stops for five seconds.
```


```{bash, echo=T}
history | tail
#show last 10 of commands I used.
#212  chmod +x middle.sh
#213  ls -al
#214  chmod +x pg42671.txt
#215  ./middle.sh pg42671.txt 20 5
#216  ./middle.sh pg42671.txt 20 5
#217  sed -i -e 's/\r$//' middle.sh
#218  ./middle.sh pg42671.txt 20 5
#219  ./middle.sh pg42671.txt 20 5
#220  ./middle.sh pg42671.txt 20 5
#221  history | tail
```






