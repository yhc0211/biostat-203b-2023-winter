---
title: "Biostat 203B Homework 4"
subtitle: Due Mar 24 @ 11:59PM
author: Yung-Han Chang 105912578
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information:
```{r}
#| eval: false

sessionInfo()
```
Load database libraries and the tidyverse frontend:
```{r}

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidymodels))
suppressPackageStartupMessages(library(lubridate))
```

## Predicting 30-day mortality

Using the ICU cohort `icu_cohort.rds` you built in Homework 3, develop at least three analytic approaches for predicting the 30-day mortality of patients admitted to ICU using demographic information (gender, age, marital status, ethnicity), first lab measurements during ICU stay, and first vital measurements during ICU stay. For example, you can use (1) logistic regression with elastic net (lasso + ridge) penalty (e.g., glmnet or keras package), (2) random forest, (3) boosting, and (4) support vector machines, or (5) MLP neural network (keras package)

1. Partition data into 50% training set and 50% test set. Stratify partitioning according the 30-day mortality status.
```{r, echo = T}
library(caret)
set.seed(203)

icu_cohort <- readRDS("/Users/tinachang/Desktop/biostat-203b-2023-winter/hw4/icu_cohort.rds")
icu_cohort <- icu_cohort %>% 
  select(c(9,10,17:23,27:41))
icu_cohort <- icu_cohort[complete.cases(icu_cohort), ]

icu_cohort<- icu_cohort %>%
  mutate_if(is.character, as.factor) %>%
  mutate_if(is.logical, as.factor) %>%
  mutate_if(is.numeric, scale)

index <- createDataPartition(icu_cohort$thirty_day_mort,
                             p = .5, list = FALSE)
icu_train <- icu_cohort[index, ]
icu_test <- icu_cohort[-index, ]

x_train <- model.matrix(thirty_day_mort ~ ., icu_train)
x_test <- model.matrix(thirty_day_mort ~ ., icu_test)
y_train <- icu_train$thirty_day_mort
y_test <- icu_test$thirty_day_mort
```

2. Train and tune the models using the training set.
3. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each model.
```{r}
#logistics with lasso
library(caret)
library(glmnet)
library(pROC)

control <- trainControl(method = "repeatedcv",
                              number = 5,
                              repeats = 5,
                              search = "random",
                              verboseIter = TRUE)

elastic_model <- train(as.factor(thirty_day_mort)~ .,
                           data = icu_train,
                           method = "glmnet",
                           preProcess = c("center", "scale"),
                           tuneLength = 25,
                           trControl = control)

pred_ela <- predict(elastic_model, icu_test)
accuracy_ela<-mean(pred_ela  == icu_test$thirty_day_mort)
roc_ela <- roc(y_test, as.numeric(pred_ela))
auc_ela<-auc(roc_ela)
```

```{r, echo = T}
cat('ElasticNet accuracy:' ,accuracy_ela,"\n")
cat('ElasticNet AUC', auc_ela,"\n")
```

```{r, echo = T}
#random forest
library(randomForest)
library(ROCR)
fit_rf <- randomForest(as.factor(thirty_day_mort) ~ ., data=icu_train, ntree = 300)
prob_rf <- as.data.frame(predict(fit_rf, icu_test, type = "prob"))
pred_rf <- predict(fit_rf,  icu_test)
accuracy_rf<-mean(pred_rf == icu_test$thirty_day_mort)
roc_rf <- roc(y_test, as.numeric(pred_rf))
auc_rf<-auc(roc_rf)
cat('RandomForest accuracy:', accuracy_rf,"\n")
cat('RandomForest AUC', auc_rf,"\n")
```

```{r, echo = T}
#SVM
library(e1071)
fit_svm = svm(as.factor(thirty_day_mort) ~ ., data=icu_train, kernel = "linear", cost = 10, scale = FALSE)
pred_svm <- predict(fit_svm,icu_test, type = "response")
accuracy_svm<-mean(pred_svm == icu_test$thirty_day_mort)
roc_svm <- roc(y_test, as.numeric(pred_rf))
auc_svm<-auc(roc_svm)
cat('SVM accuracy:', accuracy_svm,"\n")
cat('SVM AUC', auc_svm,"\n")
```


